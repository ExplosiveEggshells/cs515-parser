#ifndef ID_TABLE
#define ID_TABLE
/**
 * @file id_table.h
 * @author Jake Rogers
 * @brief This file contains a large look-up table for translating the 'id' of any given token to
 * a short, human-readable string which tells us what it's type is. For instance, the id for identifiers
 * will be "IDENT" instead of just 55 (not the actual ID, just an example).
 * 
 * The majority of the single-character tokens possible within this language have their IDs match up with
 * their ASCII equivalent. ASCII characters which are unused within this language are instead replaced with
 * some other complex token construct (such as identifiers, assign, integers, strings, etc.) or ILLEGAL.
 */

#include <string>


std::string token_strings[] = 
{
    "NULL",           
    "SOH",            
    "STX",            
    "ETX",            
    "EOT",            
    "ENQ",            
    "ACK",            
    "BEL",            
    "BS",             
    "HT",             
    "LF",             
    "VT",             
    "FF",             
    "CR",             
    "SO",             
    "SI",             
    "DLE",            
    "DC1",            
    "DC2",            
    "DC3",            
    "DC4",            
    "NAK",            
    "SYN",            
    "ETB",            
    "CAN",            
    "EM",             
    "SUB",            
    "ESC",            
    "FS",             
    "GS",             
    "RS",             
    "US",             
    "SPACE",          
    "NOT",        
    "DQUOTE",         
    "POUND",          
    "DOLLAR",         
    "PERCENT",        
    "AND",      
    "SQUOTE",         
    "LPAREN",         
    "RPAREN",         
    "MULT",           
    "PLUS",           
    "COMMA",          
    "MINUS",          
    "DOT",            
    "DIV",            
    "GREATER_EQ",  
    "LESS_EQ",     
    "NOT_EQUAL",      
    "ASSIGN",         
    "IDENT",          
    "INTEGER",        
    "REAL",           
    "STRING",         
    "EOF",
    "ILLEGAL",
    "COLON",          
    "SEMICOLON",      
    "LESSTHAN",      
    "EQUAL",          
    "GREATER",   
    "QUESTION",       
    "AT",             
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "LBRACKET",       
    "FORSLASH",      
    "RBRACKET",       
    "EXP",         
    "ILLEGAL",        
    "GRAVE",          
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",        
    "ILLEGAL",
    "LCURLY",         
    "OR",           
    "RCURLY",         
    "TILDE",          
};

#endif